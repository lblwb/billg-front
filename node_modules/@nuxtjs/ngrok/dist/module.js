'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const defu2 = _interopDefault(require('defu'));
const ngrok2 = _interopDefault(require('ngrok'));
const chalk2 = _interopDefault(require('chalk'));

const CONFIG_KEY = "ngrok";
const nuxtModule = function(moduleOptions) {
  const {nuxt} = this;
  if (nuxt.options.dev === false) {
    return;
  }
  const defaults = {
    authtoken: process.env.NGROK_TOKEN,
    auth: process.env.NGROK_AUTH
  };
  const options = defu2(this.options[CONFIG_KEY], moduleOptions, defaults);
  if (!options.auth) {
    console.warn("[ngrok] Dev server exposed to internet without password protection! Consider using `ngrok.auth` options");
  }
  let url;
  nuxt.hook("listen", async (_server, {port}) => {
    if (options.authtoken) {
      await ngrok2.authtoken(options.authtoken);
    }
    url = await ngrok2.connect({...options, addr: port});
    nuxt.options.publicRuntimeConfig.ngrok = {url};
    nuxt.options.cli.badgeMessages.push(`Public URL: ${chalk2.underline.yellow(url)}`);
  });
  nuxt.hook("close", () => {
    url && ngrok2.disconnect();
  });
};
nuxtModule.meta = require("../package.json");

module.exports = nuxtModule;
